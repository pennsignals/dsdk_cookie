[build-system]
requires = [
    "pip>=22.0.4",
    "pytest-runner>=6.0.0",
    "setuptools>=61.2.0",
    "setuptools_scm[toml]>=6.4.2",
    "wheel>=0.37.1",
]
build-backend = "setuptools.build_meta"

[project]
authors = [
    { name = "Penn Signals", email = "pennsignals@pennmedicine.upenn.edu" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: Unix",
    "Operating System :: POSIX",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Utilities",
]
description = "{{cookiecutter.description}}"
dependencies = [
    "dsdk>=1.6.0",
    "numpy>=1.22.0",
    "pandas>=1.3.5",
    "python-dateutil",
    "scikit-learn>=1.0.2",
    "scipy>=1.7.3",
]
dynamic = ["version"]
license = { file = "license.txt" }
name = "{{cookiecutter.name}}"
requires-python = ">=3.9"
readme = "readme.md"

[project.optional-dependencies]
dev = [
    "astroid",
    "black",
    "coverage[toml]",
    "flake8",
    "flake8-bugbear",
    "flake8-commas",
    "flake8-comprehensions",
    "flake8-docstrings",
    # "flake8-logging-format",
    "flake8-mutable",
    "flake8-sorted-keys",
    "isort",
    "mypy",
    "pep8-naming",
    "pre-commit",
    "pylint",
    "pytest",
    "pytest-cov",
    "types-pkg-resources",
    "types-pyyaml",
]

[project.scripts]
predict = "{{cookiecutter.name}}:Service.main"
create.gold = "{{cookiecutter.name}}:Service.create_gold"
validate.gold = "{{cookiecutter.name}}:Service.validate_gold"
pickle = "{{cookiecutter.name}}:Model.pickle"
# publish.flowsheets = "{{cookiecutter.name}}:Service.publish_flowsheets"
# publish.flowsheet = "{{cookiecutter.name}}:Service.publish_flowsheet"

[project.urls]
Homepage = "https://{{cookiecutter.repo}}"
Source = "https://{{cookiecutter.repo}}"
Tracker = "https://{{cookiecutter.repo}}/issues"

[tool.black]
line-length = 79
target-version = ["py39"]

[tool.coverage.report]
exclude_lines = [
    "raise NotImplementedError()",
    "pragma: nocover",
    "if __name__ == .__main__.:",
]
precision = 2
show_missing = true

[tool.coverage.run]
branch = true
parallel = true

[tool.distutils.bdist_wheel]
python-tag = "py39"

[tool.isort]
include_trailing_comma = true
line_length = 79
multi_line_output = 3
known_first_party = ["{{cookiecutter.name}}"]
default_section = "THIRDPARTY"

[tool.pylint.basic]
good-names = '''at,df,i,logger'''

[tool.pylint.master]
ignore = '''docs'''

[tool.pylint.message_control]
disable = '''duplicate-code'''

[tool.pylint.miscellaneous]
notes = '''FIXME,XXX'''

[tool.pylint.similarities]
min-similarity-lines = 4
ignore-comments = "yes"
ignore-docstrings = "yes"
ignore-imports = "yes"

[tool.pytest.ini_options]
addopts = "-ra --cov={{cookiecutter.name}} --cov-report term-missing --strict --ignore=.eggs --tb=short"
testpaths = ["predict/test"]
norecursedirs = ".env .git build dist"
python_files = "test.py tests.py test_*.py *_test.py"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["predict/src"]

[tool.setuptools_scm]
local_scheme = "dirty-tag"
